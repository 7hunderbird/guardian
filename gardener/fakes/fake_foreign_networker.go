// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/guardian/gardener"
	"github.com/pivotal-golang/lager"
)

type FakeForeignNetworker struct {
	NetworkStub        func(log lager.Logger, handle, spec string) (string, error)
	networkMutex       sync.RWMutex
	networkArgsForCall []struct {
		log    lager.Logger
		handle string
		spec   string
	}
	networkReturns struct {
		result1 string
		result2 error
	}
	CapacityStub        func() uint64
	capacityMutex       sync.RWMutex
	capacityArgsForCall []struct{}
	capacityReturns     struct {
		result1 uint64
	}
}

func (fake *FakeForeignNetworker) Network(log lager.Logger, handle string, spec string) (string, error) {
	fake.networkMutex.Lock()
	fake.networkArgsForCall = append(fake.networkArgsForCall, struct {
		log    lager.Logger
		handle string
		spec   string
	}{log, handle, spec})
	fake.networkMutex.Unlock()
	if fake.NetworkStub != nil {
		return fake.NetworkStub(log, handle, spec)
	} else {
		return fake.networkReturns.result1, fake.networkReturns.result2
	}
}

func (fake *FakeForeignNetworker) NetworkCallCount() int {
	fake.networkMutex.RLock()
	defer fake.networkMutex.RUnlock()
	return len(fake.networkArgsForCall)
}

func (fake *FakeForeignNetworker) NetworkArgsForCall(i int) (lager.Logger, string, string) {
	fake.networkMutex.RLock()
	defer fake.networkMutex.RUnlock()
	return fake.networkArgsForCall[i].log, fake.networkArgsForCall[i].handle, fake.networkArgsForCall[i].spec
}

func (fake *FakeForeignNetworker) NetworkReturns(result1 string, result2 error) {
	fake.NetworkStub = nil
	fake.networkReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeForeignNetworker) Capacity() uint64 {
	fake.capacityMutex.Lock()
	fake.capacityArgsForCall = append(fake.capacityArgsForCall, struct{}{})
	fake.capacityMutex.Unlock()
	if fake.CapacityStub != nil {
		return fake.CapacityStub()
	} else {
		return fake.capacityReturns.result1
	}
}

func (fake *FakeForeignNetworker) CapacityCallCount() int {
	fake.capacityMutex.RLock()
	defer fake.capacityMutex.RUnlock()
	return len(fake.capacityArgsForCall)
}

func (fake *FakeForeignNetworker) CapacityReturns(result1 uint64) {
	fake.CapacityStub = nil
	fake.capacityReturns = struct {
		result1 uint64
	}{result1}
}

var _ gardener.ForeignNetworker = new(FakeForeignNetworker)
