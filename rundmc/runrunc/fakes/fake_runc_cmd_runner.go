// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/guardian/rundmc/runrunc"
	"github.com/pivotal-golang/lager"
)

type FakeRuncCmdRunner struct {
	RunAndLogStub        func(log lager.Logger, cmd runrunc.LoggingCmd) error
	runAndLogMutex       sync.RWMutex
	runAndLogArgsForCall []struct {
		log lager.Logger
		cmd runrunc.LoggingCmd
	}
	runAndLogReturns struct {
		result1 error
	}
}

func (fake *FakeRuncCmdRunner) RunAndLog(log lager.Logger, cmd runrunc.LoggingCmd) error {
	fake.runAndLogMutex.Lock()
	fake.runAndLogArgsForCall = append(fake.runAndLogArgsForCall, struct {
		log lager.Logger
		cmd runrunc.LoggingCmd
	}{log, cmd})
	fake.runAndLogMutex.Unlock()
	if fake.RunAndLogStub != nil {
		return fake.RunAndLogStub(log, cmd)
	} else {
		return fake.runAndLogReturns.result1
	}
}

func (fake *FakeRuncCmdRunner) RunAndLogCallCount() int {
	fake.runAndLogMutex.RLock()
	defer fake.runAndLogMutex.RUnlock()
	return len(fake.runAndLogArgsForCall)
}

func (fake *FakeRuncCmdRunner) RunAndLogArgsForCall(i int) (lager.Logger, runrunc.LoggingCmd) {
	fake.runAndLogMutex.RLock()
	defer fake.runAndLogMutex.RUnlock()
	return fake.runAndLogArgsForCall[i].log, fake.runAndLogArgsForCall[i].cmd
}

func (fake *FakeRuncCmdRunner) RunAndLogReturns(result1 error) {
	fake.RunAndLogStub = nil
	fake.runAndLogReturns = struct {
		result1 error
	}{result1}
}

var _ runrunc.RuncCmdRunner = new(FakeRuncCmdRunner)
