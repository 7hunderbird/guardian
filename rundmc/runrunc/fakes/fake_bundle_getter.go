// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/goci"
	"github.com/cloudfoundry-incubator/guardian/rundmc/depot"
	"github.com/cloudfoundry-incubator/guardian/rundmc/runrunc"
	"github.com/pivotal-golang/lager"
)

type FakeBundleGetter struct {
	GetBundleStub        func(log lager.Logger, bundleloader depot.BundleLoader, containerID string) (*goci.Bndl, error)
	getBundleMutex       sync.RWMutex
	getBundleArgsForCall []struct {
		log          lager.Logger
		bundleloader depot.BundleLoader
		containerID  string
	}
	getBundleReturns struct {
		result1 *goci.Bndl
		result2 error
	}
}

func (fake *FakeBundleGetter) GetBundle(log lager.Logger, bundleloader depot.BundleLoader, containerID string) (*goci.Bndl, error) {
	fake.getBundleMutex.Lock()
	fake.getBundleArgsForCall = append(fake.getBundleArgsForCall, struct {
		log          lager.Logger
		bundleloader depot.BundleLoader
		containerID  string
	}{log, bundleloader, containerID})
	fake.getBundleMutex.Unlock()
	if fake.GetBundleStub != nil {
		return fake.GetBundleStub(log, bundleloader, containerID)
	} else {
		return fake.getBundleReturns.result1, fake.getBundleReturns.result2
	}
}

func (fake *FakeBundleGetter) GetBundleCallCount() int {
	fake.getBundleMutex.RLock()
	defer fake.getBundleMutex.RUnlock()
	return len(fake.getBundleArgsForCall)
}

func (fake *FakeBundleGetter) GetBundleArgsForCall(i int) (lager.Logger, depot.BundleLoader, string) {
	fake.getBundleMutex.RLock()
	defer fake.getBundleMutex.RUnlock()
	return fake.getBundleArgsForCall[i].log, fake.getBundleArgsForCall[i].bundleloader, fake.getBundleArgsForCall[i].containerID
}

func (fake *FakeBundleGetter) GetBundleReturns(result1 *goci.Bndl, result2 error) {
	fake.GetBundleStub = nil
	fake.getBundleReturns = struct {
		result1 *goci.Bndl
		result2 error
	}{result1, result2}
}

var _ runrunc.BundleGetter = new(FakeBundleGetter)
