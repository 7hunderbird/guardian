// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/goci"
	"github.com/cloudfoundry-incubator/guardian/gardener"
	"github.com/cloudfoundry-incubator/guardian/rundmc"
)

type FakeBundlerRule struct {
	ApplyStub        func(bndle goci.Bndl, spec gardener.DesiredContainerSpec) goci.Bndl
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		bndle goci.Bndl
		spec  gardener.DesiredContainerSpec
	}
	applyReturns struct {
		result1 goci.Bndl
	}
}

func (fake *FakeBundlerRule) Apply(bndle goci.Bndl, spec gardener.DesiredContainerSpec) goci.Bndl {
	fake.applyMutex.Lock()
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		bndle goci.Bndl
		spec  gardener.DesiredContainerSpec
	}{bndle, spec})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(bndle, spec)
	} else {
		return fake.applyReturns.result1
	}
}

func (fake *FakeBundlerRule) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeBundlerRule) ApplyArgsForCall(i int) (goci.Bndl, gardener.DesiredContainerSpec) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].bndle, fake.applyArgsForCall[i].spec
}

func (fake *FakeBundlerRule) ApplyReturns(result1 goci.Bndl) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 goci.Bndl
	}{result1}
}

var _ rundmc.BundlerRule = new(FakeBundlerRule)
