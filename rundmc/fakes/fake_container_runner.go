// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden"
	"github.com/cloudfoundry-incubator/guardian/rundmc"
)

type FakeContainerRunner struct {
	StartStub        func(path string, io garden.ProcessIO) (garden.Process, error)
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		path string
		io   garden.ProcessIO
	}
	startReturns struct {
		result1 garden.Process
		result2 error
	}
	ExecStub        func(path string, spec garden.ProcessSpec, io garden.ProcessIO) (garden.Process, error)
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		path string
		spec garden.ProcessSpec
		io   garden.ProcessIO
	}
	execReturns struct {
		result1 garden.Process
		result2 error
	}
	KillStub        func(path string) error
	killMutex       sync.RWMutex
	killArgsForCall []struct {
		path string
	}
	killReturns struct {
		result1 error
	}
}

func (fake *FakeContainerRunner) Start(path string, io garden.ProcessIO) (garden.Process, error) {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		path string
		io   garden.ProcessIO
	}{path, io})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub(path, io)
	} else {
		return fake.startReturns.result1, fake.startReturns.result2
	}
}

func (fake *FakeContainerRunner) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeContainerRunner) StartArgsForCall(i int) (string, garden.ProcessIO) {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return fake.startArgsForCall[i].path, fake.startArgsForCall[i].io
}

func (fake *FakeContainerRunner) StartReturns(result1 garden.Process, result2 error) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 garden.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerRunner) Exec(path string, spec garden.ProcessSpec, io garden.ProcessIO) (garden.Process, error) {
	fake.execMutex.Lock()
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		path string
		spec garden.ProcessSpec
		io   garden.ProcessIO
	}{path, spec, io})
	fake.execMutex.Unlock()
	if fake.ExecStub != nil {
		return fake.ExecStub(path, spec, io)
	} else {
		return fake.execReturns.result1, fake.execReturns.result2
	}
}

func (fake *FakeContainerRunner) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *FakeContainerRunner) ExecArgsForCall(i int) (string, garden.ProcessSpec, garden.ProcessIO) {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return fake.execArgsForCall[i].path, fake.execArgsForCall[i].spec, fake.execArgsForCall[i].io
}

func (fake *FakeContainerRunner) ExecReturns(result1 garden.Process, result2 error) {
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 garden.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerRunner) Kill(path string) error {
	fake.killMutex.Lock()
	fake.killArgsForCall = append(fake.killArgsForCall, struct {
		path string
	}{path})
	fake.killMutex.Unlock()
	if fake.KillStub != nil {
		return fake.KillStub(path)
	} else {
		return fake.killReturns.result1
	}
}

func (fake *FakeContainerRunner) KillCallCount() int {
	fake.killMutex.RLock()
	defer fake.killMutex.RUnlock()
	return len(fake.killArgsForCall)
}

func (fake *FakeContainerRunner) KillArgsForCall(i int) string {
	fake.killMutex.RLock()
	defer fake.killMutex.RUnlock()
	return fake.killArgsForCall[i].path
}

func (fake *FakeContainerRunner) KillReturns(result1 error) {
	fake.KillStub = nil
	fake.killReturns = struct {
		result1 error
	}{result1}
}

var _ rundmc.ContainerRunner = new(FakeContainerRunner)
