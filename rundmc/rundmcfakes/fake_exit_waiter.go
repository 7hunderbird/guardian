// This file was generated by counterfeiter
package rundmcfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/guardian/rundmc"
)

type FakeExitWaiter struct {
	WaitStub        func(path string) (<-chan struct{}, error)
	waitMutex       sync.RWMutex
	waitArgsForCall []struct {
		path string
	}
	waitReturns struct {
		result1 <-chan struct{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExitWaiter) Wait(path string) (<-chan struct{}, error) {
	fake.waitMutex.Lock()
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("Wait", []interface{}{path})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		return fake.WaitStub(path)
	} else {
		return fake.waitReturns.result1, fake.waitReturns.result2
	}
}

func (fake *FakeExitWaiter) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeExitWaiter) WaitArgsForCall(i int) string {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return fake.waitArgsForCall[i].path
}

func (fake *FakeExitWaiter) WaitReturns(result1 <-chan struct{}, result2 error) {
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 <-chan struct{}
		result2 error
	}{result1, result2}
}

func (fake *FakeExitWaiter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeExitWaiter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rundmc.ExitWaiter = new(FakeExitWaiter)
