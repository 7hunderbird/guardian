// Code generated by counterfeiter. DO NOT EDIT.
package imagepluginfakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/imageplugin"
	"code.cloudfoundry.org/lager"
)

type FakeLogger struct {
	DebugStub        func(action string, data ...lager.Data)
	debugMutex       sync.RWMutex
	debugArgsForCall []struct {
		action string
		data   []lager.Data
	}
	InfoStub        func(action string, data ...lager.Data)
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		action string
		data   []lager.Data
	}
	ErrorStub        func(action string, err error, data ...lager.Data)
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		action string
		err    error
		data   []lager.Data
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogger) Debug(action string, data ...lager.Data) {
	fake.debugMutex.Lock()
	fake.debugArgsForCall = append(fake.debugArgsForCall, struct {
		action string
		data   []lager.Data
	}{action, data})
	fake.recordInvocation("Debug", []interface{}{action, data})
	fake.debugMutex.Unlock()
	if fake.DebugStub != nil {
		fake.DebugStub(action, data...)
	}
}

func (fake *FakeLogger) DebugCallCount() int {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return len(fake.debugArgsForCall)
}

func (fake *FakeLogger) DebugArgsForCall(i int) (string, []lager.Data) {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return fake.debugArgsForCall[i].action, fake.debugArgsForCall[i].data
}

func (fake *FakeLogger) Info(action string, data ...lager.Data) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		action string
		data   []lager.Data
	}{action, data})
	fake.recordInvocation("Info", []interface{}{action, data})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		fake.InfoStub(action, data...)
	}
}

func (fake *FakeLogger) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeLogger) InfoArgsForCall(i int) (string, []lager.Data) {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].action, fake.infoArgsForCall[i].data
}

func (fake *FakeLogger) Error(action string, err error, data ...lager.Data) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		action string
		err    error
		data   []lager.Data
	}{action, err, data})
	fake.recordInvocation("Error", []interface{}{action, err, data})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		fake.ErrorStub(action, err, data...)
	}
}

func (fake *FakeLogger) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeLogger) ErrorArgsForCall(i int) (string, error, []lager.Data) {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return fake.errorArgsForCall[i].action, fake.errorArgsForCall[i].err, fake.errorArgsForCall[i].data
}

func (fake *FakeLogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ imageplugin.Logger = new(FakeLogger)
