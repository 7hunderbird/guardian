// This file was generated by counterfeiter
package kawasakifakes

import (
	"net"
	"sync"

	"code.cloudfoundry.org/guardian/kawasaki"
)

type FakeNameserversSerializer struct {
	SerializeStub        func([]net.IP) []byte
	serializeMutex       sync.RWMutex
	serializeArgsForCall []struct {
		arg1 []net.IP
	}
	serializeReturns struct {
		result1 []byte
	}
	serializeReturnsOnCall map[int]struct {
		result1 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNameserversSerializer) Serialize(arg1 []net.IP) []byte {
	var arg1Copy []net.IP
	if arg1 != nil {
		arg1Copy = make([]net.IP, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.serializeMutex.Lock()
	ret, specificReturn := fake.serializeReturnsOnCall[len(fake.serializeArgsForCall)]
	fake.serializeArgsForCall = append(fake.serializeArgsForCall, struct {
		arg1 []net.IP
	}{arg1Copy})
	fake.recordInvocation("Serialize", []interface{}{arg1Copy})
	fake.serializeMutex.Unlock()
	if fake.SerializeStub != nil {
		return fake.SerializeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.serializeReturns.result1
}

func (fake *FakeNameserversSerializer) SerializeCallCount() int {
	fake.serializeMutex.RLock()
	defer fake.serializeMutex.RUnlock()
	return len(fake.serializeArgsForCall)
}

func (fake *FakeNameserversSerializer) SerializeArgsForCall(i int) []net.IP {
	fake.serializeMutex.RLock()
	defer fake.serializeMutex.RUnlock()
	return fake.serializeArgsForCall[i].arg1
}

func (fake *FakeNameserversSerializer) SerializeReturns(result1 []byte) {
	fake.SerializeStub = nil
	fake.serializeReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeNameserversSerializer) SerializeReturnsOnCall(i int, result1 []byte) {
	fake.SerializeStub = nil
	if fake.serializeReturnsOnCall == nil {
		fake.serializeReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.serializeReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeNameserversSerializer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.serializeMutex.RLock()
	defer fake.serializeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNameserversSerializer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kawasaki.NameserversSerializer = new(FakeNameserversSerializer)
