// This file was generated by counterfeiter
package kawasakifakes

import (
	"net"
	"sync"

	"code.cloudfoundry.org/guardian/kawasaki"
)

type FakeNameserversDeterminer struct {
	DetermineStub        func(resolvContents string, hostIP net.IP, pluginNameservers, operatorNameservers, additionalNameservers []net.IP) []net.IP
	determineMutex       sync.RWMutex
	determineArgsForCall []struct {
		resolvContents        string
		hostIP                net.IP
		pluginNameservers     []net.IP
		operatorNameservers   []net.IP
		additionalNameservers []net.IP
	}
	determineReturns struct {
		result1 []net.IP
	}
	determineReturnsOnCall map[int]struct {
		result1 []net.IP
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNameserversDeterminer) Determine(resolvContents string, hostIP net.IP, pluginNameservers []net.IP, operatorNameservers []net.IP, additionalNameservers []net.IP) []net.IP {
	var pluginNameserversCopy []net.IP
	if pluginNameservers != nil {
		pluginNameserversCopy = make([]net.IP, len(pluginNameservers))
		copy(pluginNameserversCopy, pluginNameservers)
	}
	var operatorNameserversCopy []net.IP
	if operatorNameservers != nil {
		operatorNameserversCopy = make([]net.IP, len(operatorNameservers))
		copy(operatorNameserversCopy, operatorNameservers)
	}
	var additionalNameserversCopy []net.IP
	if additionalNameservers != nil {
		additionalNameserversCopy = make([]net.IP, len(additionalNameservers))
		copy(additionalNameserversCopy, additionalNameservers)
	}
	fake.determineMutex.Lock()
	ret, specificReturn := fake.determineReturnsOnCall[len(fake.determineArgsForCall)]
	fake.determineArgsForCall = append(fake.determineArgsForCall, struct {
		resolvContents        string
		hostIP                net.IP
		pluginNameservers     []net.IP
		operatorNameservers   []net.IP
		additionalNameservers []net.IP
	}{resolvContents, hostIP, pluginNameserversCopy, operatorNameserversCopy, additionalNameserversCopy})
	fake.recordInvocation("Determine", []interface{}{resolvContents, hostIP, pluginNameserversCopy, operatorNameserversCopy, additionalNameserversCopy})
	fake.determineMutex.Unlock()
	if fake.DetermineStub != nil {
		return fake.DetermineStub(resolvContents, hostIP, pluginNameservers, operatorNameservers, additionalNameservers)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.determineReturns.result1
}

func (fake *FakeNameserversDeterminer) DetermineCallCount() int {
	fake.determineMutex.RLock()
	defer fake.determineMutex.RUnlock()
	return len(fake.determineArgsForCall)
}

func (fake *FakeNameserversDeterminer) DetermineArgsForCall(i int) (string, net.IP, []net.IP, []net.IP, []net.IP) {
	fake.determineMutex.RLock()
	defer fake.determineMutex.RUnlock()
	return fake.determineArgsForCall[i].resolvContents, fake.determineArgsForCall[i].hostIP, fake.determineArgsForCall[i].pluginNameservers, fake.determineArgsForCall[i].operatorNameservers, fake.determineArgsForCall[i].additionalNameservers
}

func (fake *FakeNameserversDeterminer) DetermineReturns(result1 []net.IP) {
	fake.DetermineStub = nil
	fake.determineReturns = struct {
		result1 []net.IP
	}{result1}
}

func (fake *FakeNameserversDeterminer) DetermineReturnsOnCall(i int, result1 []net.IP) {
	fake.DetermineStub = nil
	if fake.determineReturnsOnCall == nil {
		fake.determineReturnsOnCall = make(map[int]struct {
			result1 []net.IP
		})
	}
	fake.determineReturnsOnCall[i] = struct {
		result1 []net.IP
	}{result1}
}

func (fake *FakeNameserversDeterminer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.determineMutex.RLock()
	defer fake.determineMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNameserversDeterminer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kawasaki.NameserversDeterminer = new(FakeNameserversDeterminer)
