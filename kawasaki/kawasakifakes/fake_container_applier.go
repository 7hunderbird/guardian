// This file was generated by counterfeiter
package kawasakifakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/kawasaki"
	"code.cloudfoundry.org/lager"
)

type FakeContainerApplier struct {
	ApplyStub        func(logger lager.Logger, cfg kawasaki.NetworkConfig) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		logger lager.Logger
		cfg    kawasaki.NetworkConfig
	}
	applyReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerApplier) Apply(logger lager.Logger, cfg kawasaki.NetworkConfig) error {
	fake.applyMutex.Lock()
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		logger lager.Logger
		cfg    kawasaki.NetworkConfig
	}{logger, cfg})
	fake.recordInvocation("Apply", []interface{}{logger, cfg})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(logger, cfg)
	} else {
		return fake.applyReturns.result1
	}
}

func (fake *FakeContainerApplier) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeContainerApplier) ApplyArgsForCall(i int) (lager.Logger, kawasaki.NetworkConfig) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].logger, fake.applyArgsForCall[i].cfg
}

func (fake *FakeContainerApplier) ApplyReturns(result1 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerApplier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeContainerApplier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kawasaki.ContainerApplier = new(FakeContainerApplier)
