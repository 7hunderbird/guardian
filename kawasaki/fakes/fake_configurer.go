// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/guardian/kawasaki"
	"github.com/pivotal-golang/lager"
)

type FakeConfigurer struct {
	ApplyStub        func(log lager.Logger, cfg kawasaki.NetworkConfig, nsPath string) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		log    lager.Logger
		cfg    kawasaki.NetworkConfig
		nsPath string
	}
	applyReturns struct {
		result1 error
	}
	DestroyBridgeStub        func(log lager.Logger, cfg kawasaki.NetworkConfig) error
	destroyBridgeMutex       sync.RWMutex
	destroyBridgeArgsForCall []struct {
		log lager.Logger
		cfg kawasaki.NetworkConfig
	}
	destroyBridgeReturns struct {
		result1 error
	}
	DestroyIPTablesRulesStub        func(log lager.Logger, cfg kawasaki.NetworkConfig) error
	destroyIPTablesRulesMutex       sync.RWMutex
	destroyIPTablesRulesArgsForCall []struct {
		log lager.Logger
		cfg kawasaki.NetworkConfig
	}
	destroyIPTablesRulesReturns struct {
		result1 error
	}
}

func (fake *FakeConfigurer) Apply(log lager.Logger, cfg kawasaki.NetworkConfig, nsPath string) error {
	fake.applyMutex.Lock()
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		log    lager.Logger
		cfg    kawasaki.NetworkConfig
		nsPath string
	}{log, cfg, nsPath})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(log, cfg, nsPath)
	} else {
		return fake.applyReturns.result1
	}
}

func (fake *FakeConfigurer) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeConfigurer) ApplyArgsForCall(i int) (lager.Logger, kawasaki.NetworkConfig, string) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].log, fake.applyArgsForCall[i].cfg, fake.applyArgsForCall[i].nsPath
}

func (fake *FakeConfigurer) ApplyReturns(result1 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfigurer) DestroyBridge(log lager.Logger, cfg kawasaki.NetworkConfig) error {
	fake.destroyBridgeMutex.Lock()
	fake.destroyBridgeArgsForCall = append(fake.destroyBridgeArgsForCall, struct {
		log lager.Logger
		cfg kawasaki.NetworkConfig
	}{log, cfg})
	fake.destroyBridgeMutex.Unlock()
	if fake.DestroyBridgeStub != nil {
		return fake.DestroyBridgeStub(log, cfg)
	} else {
		return fake.destroyBridgeReturns.result1
	}
}

func (fake *FakeConfigurer) DestroyBridgeCallCount() int {
	fake.destroyBridgeMutex.RLock()
	defer fake.destroyBridgeMutex.RUnlock()
	return len(fake.destroyBridgeArgsForCall)
}

func (fake *FakeConfigurer) DestroyBridgeArgsForCall(i int) (lager.Logger, kawasaki.NetworkConfig) {
	fake.destroyBridgeMutex.RLock()
	defer fake.destroyBridgeMutex.RUnlock()
	return fake.destroyBridgeArgsForCall[i].log, fake.destroyBridgeArgsForCall[i].cfg
}

func (fake *FakeConfigurer) DestroyBridgeReturns(result1 error) {
	fake.DestroyBridgeStub = nil
	fake.destroyBridgeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfigurer) DestroyIPTablesRules(log lager.Logger, cfg kawasaki.NetworkConfig) error {
	fake.destroyIPTablesRulesMutex.Lock()
	fake.destroyIPTablesRulesArgsForCall = append(fake.destroyIPTablesRulesArgsForCall, struct {
		log lager.Logger
		cfg kawasaki.NetworkConfig
	}{log, cfg})
	fake.destroyIPTablesRulesMutex.Unlock()
	if fake.DestroyIPTablesRulesStub != nil {
		return fake.DestroyIPTablesRulesStub(log, cfg)
	} else {
		return fake.destroyIPTablesRulesReturns.result1
	}
}

func (fake *FakeConfigurer) DestroyIPTablesRulesCallCount() int {
	fake.destroyIPTablesRulesMutex.RLock()
	defer fake.destroyIPTablesRulesMutex.RUnlock()
	return len(fake.destroyIPTablesRulesArgsForCall)
}

func (fake *FakeConfigurer) DestroyIPTablesRulesArgsForCall(i int) (lager.Logger, kawasaki.NetworkConfig) {
	fake.destroyIPTablesRulesMutex.RLock()
	defer fake.destroyIPTablesRulesMutex.RUnlock()
	return fake.destroyIPTablesRulesArgsForCall[i].log, fake.destroyIPTablesRulesArgsForCall[i].cfg
}

func (fake *FakeConfigurer) DestroyIPTablesRulesReturns(result1 error) {
	fake.DestroyIPTablesRulesStub = nil
	fake.destroyIPTablesRulesReturns = struct {
		result1 error
	}{result1}
}

var _ kawasaki.Configurer = new(FakeConfigurer)
