// This file was generated by counterfeiter
package iptablesfakes

import (
	"sync"

	"code.cloudfoundry.org/garden"
	"code.cloudfoundry.org/guardian/kawasaki/iptables"
)

type FakeRuleTranslator struct {
	TranslateRuleStub        func(gardenRule garden.NetOutRule) ([]iptables.Rule, error)
	translateRuleMutex       sync.RWMutex
	translateRuleArgsForCall []struct {
		gardenRule garden.NetOutRule
	}
	translateRuleReturns struct {
		result1 []iptables.Rule
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRuleTranslator) TranslateRule(gardenRule garden.NetOutRule) ([]iptables.Rule, error) {
	fake.translateRuleMutex.Lock()
	fake.translateRuleArgsForCall = append(fake.translateRuleArgsForCall, struct {
		gardenRule garden.NetOutRule
	}{gardenRule})
	fake.recordInvocation("TranslateRule", []interface{}{gardenRule})
	fake.translateRuleMutex.Unlock()
	if fake.TranslateRuleStub != nil {
		return fake.TranslateRuleStub(gardenRule)
	} else {
		return fake.translateRuleReturns.result1, fake.translateRuleReturns.result2
	}
}

func (fake *FakeRuleTranslator) TranslateRuleCallCount() int {
	fake.translateRuleMutex.RLock()
	defer fake.translateRuleMutex.RUnlock()
	return len(fake.translateRuleArgsForCall)
}

func (fake *FakeRuleTranslator) TranslateRuleArgsForCall(i int) garden.NetOutRule {
	fake.translateRuleMutex.RLock()
	defer fake.translateRuleMutex.RUnlock()
	return fake.translateRuleArgsForCall[i].gardenRule
}

func (fake *FakeRuleTranslator) TranslateRuleReturns(result1 []iptables.Rule, result2 error) {
	fake.TranslateRuleStub = nil
	fake.translateRuleReturns = struct {
		result1 []iptables.Rule
		result2 error
	}{result1, result2}
}

func (fake *FakeRuleTranslator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.translateRuleMutex.RLock()
	defer fake.translateRuleMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRuleTranslator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ iptables.RuleTranslator = new(FakeRuleTranslator)
